# include < iostream>
# include < conio.h>
using namespace std;

struct node

{

    int info;

    struct node *left;

    struct node *right;

}*root;

void insert();
void in();
void pre();
void post();


void insert(node *tree, node *newnode)

{

    if (root == NULL)

    {

        root = newnode;

        //root->info = newnode->info;

        root->left = NULL;

        root->right = NULL;

        cout<<"Root Node is Added"<< endl;

        return;

    }

    if (tree->info == newnode->info)

    {

        cout<<"Element already in the tree and duplicate values not allowed"<< endl;

        return;

    }

    if (tree->info > newnode->info)

    {

        if (tree->left != NULL)

        {

            insert(tree->left, newnode);	

	    }

	else

	{

            tree->left = newnode;

            (tree->left)->left = NULL;

            (tree->left)->right = NULL;

            cout<<"Node Added To Left"<< endl;

            return;

        }

    }

    else

    {

        if (tree->right != NULL)

        {

            insert(tree->right, newnode);

        }

        else

        {

            tree->right = newnode;

            (tree->right)->left = NULL;

            (tree->right)->right = NULL;

            cout<<"Node Added To Right"<< endl;

            return;

        }	

    }

}

void pre(node *ptr)

{

    if (root == NULL)

    {

        cout<<"Tree is empty"<< endl;

        return;

    }

    if (ptr != NULL)

    {

        cout<<ptr->info<<"  ";

        pre(ptr->left);

        pre(ptr->right);

    }

}

void in(node *ptr)

{

    if (root == NULL)

    {

        cout<<"Tree is empty"<< endl;

        return;

    }

    if (ptr != NULL)

    {

        in(ptr->left);

        cout<< ptr->info<<"  ";

        in(ptr->right);

    }

}



void post(node *ptr)

{

    if (root == NULL)

    {

        cout<<"Tree is empty"<< endl;

        return;

    }

    if (ptr != NULL)

    {

        post(ptr->left);

        post(ptr->right);

        cout<< ptr->info<<"  ";

    }

}

  



int main()

{

    int choice, num;


    node *temp;

    while (1)

    {

        cout<<"-----------------"<< endl;

        cout<<"Operations on BST"<< endl;

        cout<<"-----------------"<< endl;

        cout<<"1.Insert Element "<< endl;
        cout<<"2.inorder traversal"<< endl;
        cout<<"3.preorder traversal"<< endl;
        cout<<"4.postorder traversal"<< endl;
        cout<<"5.exit"<< endl;
        
        cout<<"Enter your choice : ";

        cin>>choice;

        switch(choice)

        {
                      case 1:

                                  temp = new node;
                                  cout<<"Enter the number to be inserted : ";
                                  cin>>temp->info;
                                  insert(root, temp);
                                  
                                  break;
                                  
                      case 2:
                           
                                  cout<<"Inorder Traversal of BST:"<< endl;
                                  in(root);
                                  cout<< endl;
                                  
                                  break;
                                  
                      case 3:
                           
                             cout<<"Preorder Traversal of BST:"<< endl;
                             pre(root);
                             cout<< endl;
                            
                             break;
                           
                      case 4:
                           
                           cout<<"Postorder Traversal of BST:"<< endl;
                           post(root);
                           cout<< endl;
                           
                           break;
                                  
                                  
                      case 5:
                           
                                  exit(1);
                                  
                      default:

                                  cout<<"Wrong choice"<< endl;

        }

    }

}

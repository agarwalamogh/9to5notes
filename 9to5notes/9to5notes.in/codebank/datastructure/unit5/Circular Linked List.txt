//PROGRAM ON CIRCULAR LINK LIST FOR INSERTION DELETION INSERTION AT BEGINING TRAVERSING
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
#include< iostream>
#include< conio.h>
using namespace std;
struct linko
{
       int data;
       struct linko *link;
}*head=NULL,*ptr,*nptr;
typedef struct linko node;
void insertend();
void mid();
void traverse();
void beg();
void delmid();
int main()
{
    int a;
    while(1)
    {
            cout<<"\nENTER \n\t1. for insertion\n\t2. for traversing\n\t3. for inserting at middle\n\t4. for inserting at begining\n\t5. for deleting from middle\n\tOther to exit::";
            cin>>a;
            switch(a)
            {
                     case 1: insertend();
                             break;
                     case 2:  traverse();
                              break;
                     case 3: mid();
                             break;
                     case 4: beg();
                             break;
                     case 5: delmid();
                             break;
                     default:
                             cout<<"\nTHNQ U";
                             exit(0);
                             getch();
                             }
                             }
    getch();
}
void insertend()
{
     int item;
     nptr=new node;
     cout<<"\n\tENTER THE DATA TO BE INTIALIZED:";

     cin>>item;
     nptr->data=item;
     if(head==NULL)
     {
                    head=nptr;
                    nptr->link=head;
                    cout<<"\nNODE INSERTED\n";
                    }
     else
     {
     ptr=head;
     while(ptr->link!=head)
     {
                         ptr=ptr->link;
                         }
     ptr->link=nptr;
     nptr->link=head;
     
     cout<<"\n\tELEMENT INSERTED!!!\n";
     }
     }
void mid()
{
     nptr=new node;
     int item;
     cout<<"\n\tENTER THE DATA AFTER WHICH THE NODE HAS TO BE INTIALIZED:";
     cin>>item;
     cout<<"\n\tENTER DATA OF THE NODE:";
     cin>>nptr->data;
     ptr=head;
     while(ptr->data!=item)
     {
                      ptr=ptr->link;
                      }
     nptr->link=ptr->link;
     ptr->link=nptr;
     ptr=nptr;
     cout<<"Node inserted";
}
void traverse()
{
     cout<<"\n\tTRAVERSING";
     ptr=head;
     while(ptr->link!=head)
     {
                   cout<<"\n\tData="<<ptr->data;
                   ptr=ptr->link;
                   }
                   cout<<"\n\tData="<<ptr->data;
}
void beg()
{
     nptr=new node;
     cout<<"\n\tENTER THE DATA TO BE INITIALIZED AT BEGHINING:";
     cin>>nptr->data;
 ptr=head;
     while(ptr->link!=head)
     {
                   //cout<<"\n\tData="<<q->data;
                   ptr=ptr->link;
                   }
                   ptr->link=nptr;
     nptr->link=head;
     head=nptr;
}
void delmid()
{
     int item;
     cout<<"\n\tENTER THE DATA ELEMENT WHICH HAS TO BE DELETED FROM THE MIDDLE:";
     cin>>item;
     ptr=head;
     while(ptr->link->data!=item)
     {
                      ptr=ptr->link;
                      }
     ptr->link=ptr->link->link;
     }
